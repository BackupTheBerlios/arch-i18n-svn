.TH pacman 8 "September 17, 2004" "pacman 2.9.2" ""
.SH NAME
pacman \- 软件包管理工具
.SH 概要
\fBpacman  <operation> [选项] <软件包> [软件包] ...\fP
.SH 描述
\fBpacman\fP 是一个\fI软件包管理\fP 工具，它追踪一个linux系统上的
已安装的软件包。它支持简单的依赖关系检查，能够
连接到远端的ftp服务器并自动升级本地系统的软件包。
 pacman使用的软件包基于\fIgzipped tar\fP 格式。
.SH 操作
.TP
.B "\-A, \-\-add"
往系统添加软件包。软件包将被解压
至安装根目录，同时更新软件包数据库。
.TP
.B "\-F, \-\-freshen"
类似于--upgrade，除此之外，不像--upgrade，它仅仅
升级已经安装在系统中的软件包。
.TP
.B "\-Q, \-\-query"
查询软件包数据库。该操作允许你
查看已安装的软件包和它的文件，以及该单个软件包
的meta信息（依赖关系、冲突、安装日期。
创建日期、大小）。 可用于查询本地的软件包数据库
或者单独的.tar.gz软件包。 参见
后面的\fB查询选项\fP。
.TP
.B "\-R, \-\-remove"
从系统中删除某个软件包。属于指定软件包
的所有文件都将被删除并同时
更新数据库。大多数的配置文件都将以
\fI.pacsave\fP为后缀名另存，除非使用了\fB--nosave\fP
选项。
.TP
.B "\-S, \-\-sync"
同步软件包。使用本选项，你可以直接从ftp服务器
安装软件包，包括运行该软件包所需的
所有依赖关系。举个例子，\fBpacman -S qt\fP将下载
qt和所有它依赖的软件包并安装它们。你同样可能使用
\fBpacman -Su\fP去升级所有已经过期的软件包。（见后）
.TP
.B "\-U, \-\-upgrade"
升级某个软件包。本质上这是一个“删除-然后添加”
的过程。参见\fB处理配置文件\fP
关于pacman如何特别处理配置文件的解释。
.TP
.B "\-V, \-\-version"
显示版本号并退出。
.TP
.B "\-h, \-\-help"
显示某个给定操作的语法。如果没有提供指定
的操作，将显示一般用语法。
.SH 选项
.TP
.B "\-d, \-\-nodeps"
忽略所有依赖关系检查。一般情况下，pacman将永远检查
某个软件包的依赖关系部分，以确保所有的依赖关系都
已经安装在系统中而且没有软件包冲突。本
开关禁止上述检查。
.TP
.B "\-f, \-\-force"
略过文件冲突检查，直接覆盖存在冲突的文件。如果
准备安装的软件包含有已经安装过的
文件，该选项将导致所有的这些文件都被覆盖。
应当小心使用该选项，最好不用。
.TP
.B "\-r, \-\-root <path>"
指定另选的安装根目录（默认为“/”）。
\fI不\fP应当使用该选项作为安装软件到
举例/usr/local而不是/usr的方法。而应当用于
当你打算安装某个软件包到一个暂时挂载的分区，
该分区“属于”另外一个系统的时候。你不仅可以
使用该选项指定软件将安装到哪个地方，
而且你可以用它来指定使用哪一个软件包数据库。
.TP
.B "\-v, \-\-verbose"
输出更多的状态和出错信息。
.TP
.B "\-\-config <path>"
指定某个另选的配置文件。
.TP
.B "\-\-noconfirm"
略过某些和所有的“你确信吗？”信息。这样做并不好，
除非你打算从某个脚本运行pacman。
.SH 同步选项
.TP
.B "\-c, \-\-clean"
从缓存中删除旧的软件包。当pacman下载软件包时，
它在\fI/var/cache/pacman/pkg\fP保存它们，如果你需要释放
硬盘空间，你可以使用--clean选项删除这些软件包。
使用一个--clean (或者 -c) 参数将仅仅删除\fI旧的\fP软件包，
使用两个则从缓存中删除\fI所有的\fP软件包。
.TP
.B "\-g, \-\-groups"
显示某个指定软件包组的所有成员。如果没有提供
软件包组名，将列出所有的软件包组。
.TP
.B "\-i, \-\-info"
显示指定软件包的依赖关系信息。将在所有的软件包库
中搜索符合的软件包，并显示
依赖关系、冲突等。
.TP
.B "\-l, \-\-list"
列出指定软件包库中的所有文件。可以在命令行中
指定多个软件包库。
.TP
.B "\-p, \-\-print-uris"
打印出指定软件包和依赖关系的URI地址。可以
输出为一个文件，并在晚些时候使用象wget的程序
进行下载。
.TP
.B "\-s, \-\-search <string>"
根据名字和描述在软件包清单中搜索含有
<字符串>的某个软件包.
.TP
.B "\-u, \-\-sysupgrade"
升级所有过期的软件包。pacman将检查每一个
系统中已安装的软件包，如果服务器存在更新的软件包，
则升级该软件包。pacman会提供所有它准备升级
的软件包的报告，并在没有用户确认的情况下不会自动执行。
该阶段也将自动解决依赖关系，并
在需要时同时安装/升级。
.TP
.B "\-w, \-\-downloadonly"
从服务器上取回所有软件包，但是并不进行安装/升级。
.TP
.B "\-y, \-\-refresh"
根据在\fI/etc/pacman.conf\fP定义的最新主软件包
清单从ftp服务器上下载复件。通常用于
每一次你使用\fB--sysupgrade\fP时。
.SH 删除选项
.TP
.B "\-c, \-\-cascade"
删除所有目标软件包，同时，依赖于一个或更多目标软件包
的软件包也将被删除。该操作是递归的。
.TP
.B "\-k, \-\-keep"
仅仅删除数据库中的条目。在原处保留所有的文件。
.TP
.B "\-n, \-\-nosave"
通知pacman忽略文件备份指示。通常当
某个文件将被从系统\fI删除\fP时，数据库首先
检查是否这些文件应当以.pacsave为后缀重命名。如果
使用\fB--nosave\fP，这些指示就将被忽略并
直接删除这些文件。
.TP
.B "\-s, \-\-recursive"
删除每个指定的目标以及它所有的依赖关系，倘若
(A) 其他软件包也不再需要它们； (B) 它们是用户自行安装的
而且没有被其他软件包作为一个依赖关系。
该选项有些类似于--sync选项的反面。
.SH 查询选项
.TP
.B "\-e, \-\-orphans"
显示所有单独安装的而且也不是
其他软件包所需要的软件包（诸如，没有
被其他软件包作为一个依赖关系的）
.TP
.B "\-g, \-\-groups"
显示指定软件包所属的所有软件包组。如果没有提供
软件包名，将显示所有的软件包组及其成员。
.TP
.B "\-i, \-\-info"
显示给定软件包的信息。如果连同\fB-p\fP选项使用
则将.PKGINFO文件打印输出。
.TP
.B "\-l, \-\-list"
列出属于<软件包>的所有文件。可以在命令行中指定
多个软件包。
.TP
.B "\-o, \-\-owns <文件>"
搜索<文件>所属的软件包。
.TP
.B "\-p, \-\-file"
告诉pacman命令行中提供的软件包为一个文件，
而不是一个数据库中的条目。Pacman将解压该
文件并查询它。连同\fB--info\fP和\fB--list\fP比较有用。
.TP
.B "\-s, \-\-search <字符串>"
根据名字或描述搜索含有<字符串>
的所有本地安装的软件包。
.SH 处理配置文件
pacman使用跟rpm相同的逻辑来决定设计为进行备份
的文件的动作。在一次升级中，它为每个备份文件
使用3次md5 hashes以决定需要的动作。
一次是为最初安装的文件，一次为准备安装的
新文件，一次为当前文件系统中存在的文件。
经过比较这3个hashes后，可能导致下面的情况：
.TP
最初的=\fBX\fP, 当前=\fBX\fP, 新的=\fBX\fP
3个文件均是相同的，所以无论以何种方法均可。安装新的文件。
.TP
最初的=\fBX\fP, 当前的=\fBX\fP, 新的=\fBY\fP
当前的文件跟最初的一致，但新的一个
不一样。既然用户没有修改过该文件，而新的一个
也许包含着改进/臭虫修补，我们安装新的文件。
.TP
最初的=\fBX\fP, 当前的=\fBY\fP, 新的=\fBX\fP
最初和新的软件包中文件为一致的，但是在文件系统中
的文件已经被修改过了。 这种情况下，我们
在原处保留当前的文件。
.TP
最初的=\fBX\fP, 当前的=\fBY\fP, 新的=\fBY\fP
新的与当前的一致。双赢。安装新的文件。
.TP
original=\fBX\fP, current=\fBY\fP, new=\fBZ\fP
所有三个文件都不相同。因此我们安装新的文件，但同时
将旧的文件以.pacsave为后缀进行备份。这样用户可以重新移动
旧的配置文件到他希望的地方。
.SH 配置
每次激活时，pacman都将尝试读取\fI/etc/pacman.conf\fP。
该配置文件分为几段或者\fIrepositories\fP。每段
定义了一个pacman可以在--sync模式下搜寻某个软件包
时使用的软件包库。例外的情况则在\fIoptions\fP段，此处
定义了全局的选项。
.TP
.SH 例子：
.RS
.nf
[options]
NoUpgrade = etc/passwd etc/group etc/shadow
NoUpgrade = etc/fstab

Include = /etc/pacman.d/current

[custom]
Server = file:///home/pkgs

.fi
.RE
.SH 配置选项
.TP
.B "DBPath = path/to/db/dir"
将不考虑在最顶端的数据库目录的默认位置。默认为
\fIvar/lib/pacman\fP.
.TP
.B "HoldPkg = <软件包> [软件包] ..."
如果用户试图用fB--remove\fP删除列在HoldPkg中的某个软件包，pacman
将在执行之前询求用户确认。
.TP
.B "IgnorePkg = <软件包> [软件包] ..."
指示pacman在执行\fB--sysupgrade\fP升级时
忽略某个软件包。
.TP
.B "Include = <路径>"
包括其他的配置文件。该配置文件可以包括软件包库或者
一般配置选项。
.TP
.B "ProxyServer = <host|ip>[:port]"
如果设置此处，pacman将在所有的ftp/http传输中使用该代理服务器。
.TP
.B "XferCommand = /path/to/command %u"
如果设置此处，pacman将使用外部程序下载所有的远端文件。
所有\fB%u\fP都将用被下载的URL取代。如果
已经存在, 所有\fB%o\fP都将用本地的文件名取代，并加上一个
".part"作为后缀，这样就允许象wget类似的程序能够正确的续传文件。

当用户用pacman自己内建的http/ftp支持碰到问题，或者
需要象wget那样更高级的代理支持时，
该选项就有用处了。
.TP
.B "NoPassiveFtp"
下载软件包时禁止主动ftp连接（也称作积极模式/Active Mode）
.TP
.B "NoUpgrade = <文件> [文件] ..."
所有使用\fBNoUpgrade\fP指示列出的文件将永远不会在被碰到
安装/升级某个软件包时。\fI注意：\fP指定文件时不要包括前面的slash符号。
.TP
.B "UseSyslog"
通过syslog()记录动作信息。这将把pacman日志条目插入你的
/var/log/messages或者等同的文件。
.TP
.B "LogFile = /path/to/file"
直接将动作日志写入一个文件，通常是/var/log/pacman.log.

.SH 配置：软件包库
每一个软件包库段落定义了一个分段名字，以及至少一个可以找到
软件包的地址。该分段的名字由方括号中的字符串所定义（如，
上面两个'current'和'custom'）。地址则由开头的\fIServer\fP指示加上
后面的URL命名结构组成。目前只支持ftp作为远端服务器。如果你
想使用一个本地的目录，你可以使用'file://'的前缀指定绝对路径，
如上所示。
.SH 使用你自己的软件包库
让我们假设你\fI/home/pkgs\fP下有一大堆自己创建的软件包，而它们分别的PKGBUILD
文件全部位于\fI/var/abs/local\fP。所有你需要做的是在\fI/home/pkgs\fP下产生一个
压缩过的软件包数据库以便使用--refresh运行pacman时，pacman可以找到它。

.RS
.nf
# gensync /var/abs/local /home/pkgs/custom.db.tar.gz
.fi
.RE

上述命令将读取在/var/abs/loca中的所有PKGBUILD文件并产生一个压缩后的
数据库，并命名为/home/pkgs/custom.db.tar.gz。注意数据库必须以
\fI{treename}.db.tar.gz\fP的形式，这里的{treename} 是在配置文件分段中
定义的名字。
好了。现在像上面展示的配置例子一样在配置文件
配置你的\fIcustom\fP部分吧。Pacman现在就可以使用你自己的软件包库了。如果
你在库中添加了新的软件包，记得要重新创建数据库并使用pacman's --refresh选项。
.SH 同样参见
\fBmakepkg\fP是一个和pacman一道而来的软件包创建工具，
.SH 作者及翻译者
.nf
Judd Vinet <jvinet@zeroflux.org
Arch Translation Team: Chinese Simlified by Gan Lu <rhythm_gan@yahoo.com.cn>
.fi
